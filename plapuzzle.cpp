#include <stdio.h>
#include <stdlib.h>
#include <string.h>

enum{
	BLANK = 0,
	WALL  = 99,
};

#define SIZE 8


/**************************************************************************/
typedef struct XY_ {
	int x;
	int y;
} XY;
/**************************************************************************/
typedef struct Shape_ {
	XY  dot[6];
} Shape;
/**************************************************************************/
typedef struct Piece_ {
	int shapes;
	char mark;
	Shape shape[8];
}Piece;

/**************************************************************************/
const Piece piece_x = {
	1,'x',
	{
		//   ■
		// ■■■
		//   ■
		{{{0,0},{0,1},{1,1},{-1,1},{0,2},{99,99}}},
	}
};
/**************************************************************************/
Piece piece_z = {
	4,'z',
	{
		// ■■
		//   ■
		//   ■■
		{{{0,0},{1,0},{1,1},{1,2},{2,2},{99,99}}},

		
		//     ■
		// ■■■
		// ■
		{{{0,0},{0,1},{-1,1},{-2,1},{-2,2},{99,99}}},

		// ■
		// ■■■
		//     ■
		{{{0,0},{0,1},{1,1},{2,1},{2,2},{99,99}}},

		//   ■■
		//   ■
		// ■■
		{{{0,0},{1,0},{0,1},{0,2},{-1,2},{99,99}}},
	
	}
};

/**************************************************************************/
const Piece piece_i = {
	2,'i',
	{
		//   ■■■■■
		{{{0,0},{0,1},{0,2},{0,3},{0,4},{99,99}}},
		{{{0,0},{1,0},{2,0},{3,0},{4,0},{99,99}}},
	}
};
/**************************************************************************/
const Piece piece_c = {
	4,'c',
	{
		//   ■■
		//   ■
		//   ■■
		{{{0,0},{1,0},{0,1},{0,2},{1,2},{99,99}}},
		//   ■■■
		//   ■  ■
		{{{0,0},{1,0},{2,0},{0,1},{2,1},{99,99}}},
		//   ■■
		//     ■
		//   ■■
		{{{0,0},{1,0},{1,1},{1,2},{0,2},{99,99}}},
		//   ■  ■
		//   ■■■
		{{{0,0},{0,1},{1,1},{2,1},{2,0},{99,99}}},
	}
};
/**************************************************************************/
const Piece piece_l = {
	8,'l',
	{
		//   ■
		//   ■
		//   ■
		//   ■■
		{{{0,0},{0,1},{0,2},{0,3},{1,3},{99,99}}},
		//         ■
		//   ■■■■
		{{{0,0},{0,1},{-1,1},{-2,1},{-3,1},{99,99}}},
		// ■■
		//   ■
		//   ■
		//   ■
		{{{0,0},{1,0},{1,1},{1,2},{1,3},{99,99}}},
		//   ■■■■
		//   ■
		{{{0,0},{1,0},{2,0},{3,0},{0,1},{99,99}}},

		//   ■
		//   ■
		//   ■
		// ■■
		{{{0,0},{0,1},{0,2},{0,3},{-1,3},{99,99}}},
		//   ■
		//   ■■■■
		{{{0,0},{0,1},{1,1},{2,1},{3,1},{99,99}}},
		//   ■■
		//   ■
		//   ■
		//   ■
		{{{0,0},{0,1},{0,2},{0,3},{1,0},{99,99}}},
		//   ■■■■
		//         ■
		{{{0,0},{1,0},{2,0},{3,0},{3,1},{99,99}}},
	}
};
/**************************************************************************/
const Piece piece_L = {
	4,'L',
	{
		//   ■
		//   ■
		//   ■■■
		{{{0,0},{0,1},{0,2},{1,2},{2,2},{99,99}}},
		//       ■
		//       ■
		//   ■■■
		{{{0,0},{0,1},{0,2},{-1,2},{-2,2},{99,99}}},
		// ■■■
		//     ■
		//     ■
		{{{0,0},{1,0},{2,0},{2,1},{2,2},{99,99}}},
		//   ■■■
		//   ■
		//   ■
		{{{0,0},{1,0},{2,0},{0,1},{0,2},{99,99}}},

	}
};
/**************************************************************************/
const Piece piece_w = {
	4,'w',
	{
		//   ■
		//   ■■
		//     ■■
		{{{0,0},{0,1},{1,1},{1,2},{2,2},{99,99}}},
		//       ■
		//     ■■
		//   ■■
		{{{0,0},{0,1},{-1,1},{-1,2},{-2,2},{99,99}}},
		// ■■
		//   ■■
		//     ■
		{{{0,0},{1,0},{1,1},{2,1},{2,2},{99,99}}},
		//     ■■
		//   ■■
		//   ■
		{{{0,0},{1,0},{0,1},{-1,1},{-1,2},{99,99}}},
	}
};
/**************************************************************************/
const Piece piece_T = {
	4,'T',
	{
		//   ■■■
		//     ■
		//     ■
		{{{0,0},{1,0},{2,0},{1,1},{1,2},{99,99}}},
		//     ■
		// ■■■
		//     ■
		{{{0,0},{0,1},{0,2},{-1,1},{-2,1},{99,99}}},
		// ■
		// ■■■
		// ■
		{{{0,0},{0,1},{0,2},{1,1},{2,1},{99,99}}},
		//   ■
		//   ■
		// ■■■
		{{{0,0},{0,1},{0,2},{-1,2},{1,2},{99,99}}},
	}
};
/**************************************************************************/
const Piece piece_y = {
	8,'y',
	{
		//   ■
		//   ■■
		//     ■
		//     ■
		{{{0,0},{0,1},{1,1},{1,2},{1,3},{99,99}}},
		//     ■
		//   ■■
		//   ■
		//   ■
		{{{0,0},{0,1},{-1,1},{-1,2},{-1,3},{99,99}}},
		//   ■
		//   ■
		//   ■■
		//     ■
		{{{0,0},{0,1},{0,2},{1,2},{1,3},{99,99}}},
		//     ■
		//     ■
		//   ■■
		//   ■
		{{{0,0},{0,1},{0,2},{-1,2},{-1,3},{99,99}}},

		
		//   ■■■
		//       ■■
		{{{0,0},{1,0},{2,0},{2,1},{3,1},{99,99}}},
		//   ■■■
		// ■■
		{{{0,0},{1,0},{2,0},{0,1},{-1,1},{99,99}}},
		// ■■
		//   ■■■
		{{{0,0},{1,0},{1,1},{2,1},{3,1},{99,99}}},
		//     ■■
		// ■■■
		{{{0,0},{1,0},{0,1},{-1,1},{-2,1},{99,99}}},
	}
};
/**************************************************************************/
const Piece piece_6 = {
	8,'6',
	{
		//   ■
		//   ■■
		//   ■■
		{{{0,0},{0,1},{0,2},{1,1},{1,2},{99,99}}},
		//     ■
		//   ■■
		//   ■■
		{{{0,0},{0,1},{0,2},{-1,1},{-1,2},{99,99}}},
		//   ■■
		//   ■■
		//   ■
		{{{0,0},{0,1},{0,2},{1,0},{1,1},{99,99}}},
		//   ■■
		//   ■■
		//     ■

		{{{0,0},{0,1},{1,0},{1,1},{1,2},{99,99}}},
		//   ■■■
		//   ■■
		{{{0,0},{0,1},{1,0},{1,1},{2,0},{99,99}}},
		//   ■■
		//   ■■■
		{{{0,0},{0,1},{1,0},{1,1},{2,1},{99,99}}},
		// ■■■
		//   ■■
		{{{0,0},{1,0},{2,0},{1,1},{2,1},{99,99}}},
		//   ■■
		// ■■■
		{{{0,0},{1,0},{-1,1},{0,1},{1,1},{99,99}}},
	}
};
/**************************************************************************/
const Piece piece_k = {
	8,'k',
	{
		//   ■
		//   ■■■
		//     ■
		{{{0,0},{0,1},{1,1},{2,1},{1,2},{99,99}}},
		//     ■■
		//   ■■
		//     ■
		{{{0,0},{1,0},{0,1},{0,2},{-1,1},{99,99}}},
		//     ■
		//   ■■■
		//       ■
		{{{0,0},{0,1},{-1,1},{1,1},{1,2},{99,99}}},
		//     ■
		//     ■■
		//   ■■
		{{{0,0},{0,1},{0,2},{1,1},{-1,2},{99,99}}},


		
		//       ■
		//   ■■■
		//     ■
		{{{0,0},{-2,1},{-1,1},{0,1},{-1,2},{99,99}}},
		//     ■
		//   ■■
		//     ■■
		{{{0,0},{0,1},{0,2},{-1,1},{1,2},{99,99}}},
		//     ■
		//   ■■■
		//   ■
		{{{0,0},{0,1},{-1,1},{1,1},{-1,2},{99,99}}},
		//   ■■
		//     ■■
		//     ■
		{{{0,0},{1,0},{1,1},{1,2},{2,1},{99,99}}},
		
	}
};
/**************************************************************************/
const Piece piece_t = {
	8,'t',
	{
		//     ■
		//   ■■■■
		{{{0,0},{0,1},{-1,1},{1,1},{2,1},{99,99}}},
		//       ■
		//   ■■■■
		{{{0,0},{0,1},{-2,1},{-1,1},{1,1},{99,99}}},
		//   ■■■■
		//     ■
		{{{0,0},{1,0},{2,0},{3,0},{1,1},{99,99}}},
		//   ■■■■
		//       ■
		{{{0,0},{1,0},{2,0},{3,0},{2,1},{99,99}}},

		//   ■
		//   ■■
		//   ■
		//   ■
		{{{0,0},{0,1},{0,2},{0,3},{1,1},{99,99}}},
		//   ■
		//   ■
		//   ■■
		//   ■
		{{{0,0},{0,1},{0,2},{0,3},{1,2},{99,99}}},
		//   ■
		// ■■
		//   ■
		//   ■
		{{{0,0},{0,1},{0,2},{0,3},{-1,1},{99,99}}},
		//   ■
		//   ■
		// ■■
		//   ■
		{{{0,0},{0,1},{0,2},{0,3},{-1,2},{99,99}}},
	}
};
/**************************************************************************/
Piece ps[12]={piece_x, piece_z, piece_i, piece_c,
              piece_l, piece_L, piece_w, piece_T,
			  piece_y, piece_6, piece_k, piece_t};
/**************************************************************************/
class Ban {
public:
	char map[18][18];
	
	Ban(){
		memset( &map[0][0], WALL, sizeof(map) );
		
		for( int y=1; y<1+SIZE; y++ ){
			for( int x=1; x<1+SIZE; x++ ){
				map[x][y]=BLANK;
			}
		}
		
	}
	
	
	void print(){
		for( int y=1; y<1+SIZE; y++ ){
			for( int x=1; x<1+SIZE; x++ ){
				if( map[x][y]==BLANK ){
					printf(". ");
				}else{
					printf("%c ", map[x][y]+'a');
				}
			}
			puts("");
		}
		puts("");
	}
	
	bool put_ok_check(int x, int y, Shape s){
		//printf("putting test\n");
		for( int i=0; i<5; i++ ){
			if( map[x+s.dot[i].x][y+s.dot[i].y] != BLANK ){
				return false; //NG
			}
			
		}
		return true; //YES,OK
	}

	void put(int x, int y, Shape s, int mark){
		//printf("putting test\n");
		for( int i=0; i<5; i++ ){
			if( map[x+s.dot[i].x][y+s.dot[i].y] != BLANK ){
				printf("i=%d, x=%d, y=%d, map=%d\n", i, x,y,map[x+s.dot[i].x][y+s.dot[i].y] );
				printf("%d %d\n", s.dot[i].x, s.dot[i].y );
				exit(1);
			}
			
			map[x+s.dot[i].x][y+s.dot[i].y] = mark;
		}
	}

	void unput(int x, int y, Shape s){
		for( int i=0; i<5; i++ ){
			if( map[x+s.dot[i].x][y+s.dot[i].y] == BLANK ){
				printf("i=%d, x=%d, y=%d, map=%d\n", i, x,y,map[x+s.dot[i].x][y+s.dot[i].y] );
				printf("%d %d\n", s.dot[i].x, s.dot[i].y );
				exit(1);
			}
			
			map[x+s.dot[i].x][y+s.dot[i].y] = BLANK;
		}
	}

	void findblank(int *ret_x, int *ret_y){
		for( int y=1; y<=SIZE; y++){
			for( int x=1; x<=SIZE; x++){
				if( map[x][y]==BLANK ){
					*ret_x = x;
					*ret_y = y;
					return;
				}
			}
		}
		printf("findblank: fatal, exit.");
		print();
		exit(1);
	}
};

/**************************************************************************/
//再帰により置いていく
int mark = 1;
int count = 0;
void put_piece(Ban &b, int used_map)
{
	mark ++;
	//上からスキャンして、最初の空きマスを見つける。
	int x,y;
	b.findblank(&x, &y);

	//未使用ピースから順に１個選択
	for( int i=0; i<12; i++){
		if( (used_map & (1<<i))==0 ){  //未使用
			//そのピースをいろいろなパターンで置いてみる。
			for( int j=0; j<ps[i].shapes; j++ ){
				if( b.put_ok_check(x,y,ps[i].shape[j]) == true  ){
					//置くことに成功したら
					b.put(x,y,ps[i].shape[j], mark);
					used_map |= (1<<i);
					
					//b.print();
					
					//このピースが最後のピースならば、表示
					if( used_map==0xfff ){
						count ++;
						printf("found. No.%d\n", count);
						b.print();
					}else{
						//まだ続きがあるなら再帰コール
						put_piece(b,used_map);

					}

					//ピースを外して他の可能性を探る
					b.unput(x,y,ps[i].shape[j]);
					used_map &= ~(1<<i);
				}

			}
		}
	}
	mark--;
}

/**************************************************************************/
int main()
{

	//b.put(1,1,piece_z.shape[0]);
	
	//ピースデータのチェックで
	for( int i=0; i<12; i++ ){
		for( int j=0; j<ps[i].shapes; j++ ){
			Ban b;
			b.put(4,4, ps[i].shape[j], 1);
			b.print();
		}
	}
	
	
	//ここから本番
	Ban b;
	int used_map = 0;
	
	//中央に四角を置く
	b.map[4][4] = 'x'-'a';
	b.map[4][5] = 'x'-'a';
	b.map[5][4] = 'x'-'a';
	b.map[5][5] = 'x'-'a';
	
	//ピースXの置き方を決める。それぞれで個別に検索
	used_map |= 1;
	
	b.put(3,1,ps[0].shape[0], 1);
	put_piece(b,used_map);
	b.unput(3,1,ps[0].shape[0]);

	b.put(4,1,ps[0].shape[0], 1);
	put_piece(b,used_map);
	b.unput(4,1,ps[0].shape[0]);

	
	b.put(3,2,ps[0].shape[0], 1);  //この配置は鏡面異性体があるので、Zのピースの裏表固定する
	ps[1].shapes = 2;
	put_piece(b,used_map);
	b.unput(3,2,ps[0].shape[0]);
}

